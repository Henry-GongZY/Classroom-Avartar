// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: packet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxwYWNrZXQucHJvdG8SAnBiIq8BCgdHZXN0dXJlEgwKBHJvbGwYASABKAIS",
            "DQoFcGl0Y2gYAiABKAISCwoDeWF3GAMgASgCEg8KB21pbl9lYXIYBCABKAIS",
            "CwoDbWFyGAUgASgCEgwKBG1kc3QYBiABKAISEwoLTEZyb250ZXJBcm0YByAB",
            "KAISEQoJTFVwcGVyQXJtGAggASgCEhMKC1JGcm9udGVyQXJtGAkgASgCEhEK",
            "CVJVcHBlckFybRgKIAEoAiIsCghTaW1wZ2VzdBIPCgdwcmVzZW50GAEgASgI",
            "Eg8KB2hhbmRzdXAYAiABKAgimQEKBlBhY2tldBIUCgNpZDEYASABKA4yBy5w",
            "Yi5JZDESCwoDaWQyGAIgASgNEg4KBlNvclRpZBgDIAEoCRIcCgdnZXN0dXJl",
            "GAQgASgLMgsucGIuR2VzdHVyZRIeCghzaW1wZ2VzdBgFIAEoCzIMLnBiLlNp",
            "bXBnZXN0EhAKCGZpbGVkYXRhGAYgASgMEgwKBG1lc2cYByABKAkqXQoDSWQx",
            "EgkKBUxPR0lOEAASDQoJS0VFUEFMSVZFEAESCgoGVVBEQVRFEAISCAoERklM",
            "RRADEg4KCkZJTEVVUExPQUQQBBILCgdMRVNTT05TEAUSCQoFREVCVUcQCUIH",
            "WgUuLi9wYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.Id1), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Gesture), global::Pb.Gesture.Parser, new[]{ "Roll", "Pitch", "Yaw", "MinEar", "Mar", "Mdst", "LFronterArm", "LUpperArm", "RFronterArm", "RUpperArm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Simpgest), global::Pb.Simpgest.Parser, new[]{ "Present", "Handsup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Packet), global::Pb.Packet.Parser, new[]{ "Id1", "Id2", "SorTid", "Gesture", "Simpgest", "Filedata", "Mesg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Id1 {
    /// <summary>
    ///登陆管理
    /// </summary>
    [pbr::OriginalName("LOGIN")] Login = 0,
    /// <summary>
    ///状态更新
    /// </summary>
    [pbr::OriginalName("KEEPALIVE")] Keepalive = 1,
    /// <summary>
    ///更新课程状态
    /// </summary>
    [pbr::OriginalName("UPDATE")] Update = 2,
    /// <summary>
    ///文件下载
    /// </summary>
    [pbr::OriginalName("FILE")] File = 3,
    /// <summary>
    ///文件上传
    /// </summary>
    [pbr::OriginalName("FILEUPLOAD")] Fileupload = 4,
    /// <summary>
    ///课程清单
    /// </summary>
    [pbr::OriginalName("LESSONS")] Lessons = 5,
    /// <summary>
    ///待使用
    /// </summary>
    [pbr::OriginalName("DEBUG")] Debug = 9,
  }

  #endregion

  #region Messages
  public sealed partial class Gesture : pb::IMessage<Gesture> {
    private static readonly pb::MessageParser<Gesture> _parser = new pb::MessageParser<Gesture>(() => new Gesture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Gesture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gesture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gesture(Gesture other) : this() {
      roll_ = other.roll_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      minEar_ = other.minEar_;
      mar_ = other.mar_;
      mdst_ = other.mdst_;
      lFronterArm_ = other.lFronterArm_;
      lUpperArm_ = other.lUpperArm_;
      rFronterArm_ = other.rFronterArm_;
      rUpperArm_ = other.rUpperArm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Gesture Clone() {
      return new Gesture(this);
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 1;
    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 2;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 3;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "min_ear" field.</summary>
    public const int MinEarFieldNumber = 4;
    private float minEar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinEar {
      get { return minEar_; }
      set {
        minEar_ = value;
      }
    }

    /// <summary>Field number for the "mar" field.</summary>
    public const int MarFieldNumber = 5;
    private float mar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mar {
      get { return mar_; }
      set {
        mar_ = value;
      }
    }

    /// <summary>Field number for the "mdst" field.</summary>
    public const int MdstFieldNumber = 6;
    private float mdst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mdst {
      get { return mdst_; }
      set {
        mdst_ = value;
      }
    }

    /// <summary>Field number for the "LFronterArm" field.</summary>
    public const int LFronterArmFieldNumber = 7;
    private float lFronterArm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LFronterArm {
      get { return lFronterArm_; }
      set {
        lFronterArm_ = value;
      }
    }

    /// <summary>Field number for the "LUpperArm" field.</summary>
    public const int LUpperArmFieldNumber = 8;
    private float lUpperArm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LUpperArm {
      get { return lUpperArm_; }
      set {
        lUpperArm_ = value;
      }
    }

    /// <summary>Field number for the "RFronterArm" field.</summary>
    public const int RFronterArmFieldNumber = 9;
    private float rFronterArm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RFronterArm {
      get { return rFronterArm_; }
      set {
        rFronterArm_ = value;
      }
    }

    /// <summary>Field number for the "RUpperArm" field.</summary>
    public const int RUpperArmFieldNumber = 10;
    private float rUpperArm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RUpperArm {
      get { return rUpperArm_; }
      set {
        rUpperArm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Gesture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Gesture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinEar, other.MinEar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mar, other.Mar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mdst, other.Mdst)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LFronterArm, other.LFronterArm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LUpperArm, other.LUpperArm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RFronterArm, other.RFronterArm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RUpperArm, other.RUpperArm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (Yaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (MinEar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinEar);
      if (Mar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mar);
      if (Mdst != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mdst);
      if (LFronterArm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LFronterArm);
      if (LUpperArm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LUpperArm);
      if (RFronterArm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RFronterArm);
      if (RUpperArm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RUpperArm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roll != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Roll);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Yaw);
      }
      if (MinEar != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinEar);
      }
      if (Mar != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Mar);
      }
      if (Mdst != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Mdst);
      }
      if (LFronterArm != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LFronterArm);
      }
      if (LUpperArm != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(LUpperArm);
      }
      if (RFronterArm != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RFronterArm);
      }
      if (RUpperArm != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RUpperArm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (MinEar != 0F) {
        size += 1 + 4;
      }
      if (Mar != 0F) {
        size += 1 + 4;
      }
      if (Mdst != 0F) {
        size += 1 + 4;
      }
      if (LFronterArm != 0F) {
        size += 1 + 4;
      }
      if (LUpperArm != 0F) {
        size += 1 + 4;
      }
      if (RFronterArm != 0F) {
        size += 1 + 4;
      }
      if (RUpperArm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Gesture other) {
      if (other == null) {
        return;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.MinEar != 0F) {
        MinEar = other.MinEar;
      }
      if (other.Mar != 0F) {
        Mar = other.Mar;
      }
      if (other.Mdst != 0F) {
        Mdst = other.Mdst;
      }
      if (other.LFronterArm != 0F) {
        LFronterArm = other.LFronterArm;
      }
      if (other.LUpperArm != 0F) {
        LUpperArm = other.LUpperArm;
      }
      if (other.RFronterArm != 0F) {
        RFronterArm = other.RFronterArm;
      }
      if (other.RUpperArm != 0F) {
        RUpperArm = other.RUpperArm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Roll = input.ReadFloat();
            break;
          }
          case 21: {
            Pitch = input.ReadFloat();
            break;
          }
          case 29: {
            Yaw = input.ReadFloat();
            break;
          }
          case 37: {
            MinEar = input.ReadFloat();
            break;
          }
          case 45: {
            Mar = input.ReadFloat();
            break;
          }
          case 53: {
            Mdst = input.ReadFloat();
            break;
          }
          case 61: {
            LFronterArm = input.ReadFloat();
            break;
          }
          case 69: {
            LUpperArm = input.ReadFloat();
            break;
          }
          case 77: {
            RFronterArm = input.ReadFloat();
            break;
          }
          case 85: {
            RUpperArm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Simpgest : pb::IMessage<Simpgest> {
    private static readonly pb::MessageParser<Simpgest> _parser = new pb::MessageParser<Simpgest>(() => new Simpgest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Simpgest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PacketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simpgest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simpgest(Simpgest other) : this() {
      present_ = other.present_;
      handsup_ = other.handsup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simpgest Clone() {
      return new Simpgest(this);
    }

    /// <summary>Field number for the "present" field.</summary>
    public const int PresentFieldNumber = 1;
    private bool present_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Present {
      get { return present_; }
      set {
        present_ = value;
      }
    }

    /// <summary>Field number for the "handsup" field.</summary>
    public const int HandsupFieldNumber = 2;
    private bool handsup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Handsup {
      get { return handsup_; }
      set {
        handsup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Simpgest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Simpgest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Present != other.Present) return false;
      if (Handsup != other.Handsup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Present != false) hash ^= Present.GetHashCode();
      if (Handsup != false) hash ^= Handsup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Present != false) {
        output.WriteRawTag(8);
        output.WriteBool(Present);
      }
      if (Handsup != false) {
        output.WriteRawTag(16);
        output.WriteBool(Handsup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Present != false) {
        size += 1 + 1;
      }
      if (Handsup != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Simpgest other) {
      if (other == null) {
        return;
      }
      if (other.Present != false) {
        Present = other.Present;
      }
      if (other.Handsup != false) {
        Handsup = other.Handsup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Present = input.ReadBool();
            break;
          }
          case 16: {
            Handsup = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PacketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      id1_ = other.id1_;
      id2_ = other.id2_;
      sorTid_ = other.sorTid_;
      gesture_ = other.gesture_ != null ? other.gesture_.Clone() : null;
      simpgest_ = other.simpgest_ != null ? other.simpgest_.Clone() : null;
      filedata_ = other.filedata_;
      mesg_ = other.mesg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "id1" field.</summary>
    public const int Id1FieldNumber = 1;
    private global::Pb.Id1 id1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Id1 Id1 {
      get { return id1_; }
      set {
        id1_ = value;
      }
    }

    /// <summary>Field number for the "id2" field.</summary>
    public const int Id2FieldNumber = 2;
    private uint id2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id2 {
      get { return id2_; }
      set {
        id2_ = value;
      }
    }

    /// <summary>Field number for the "SorTid" field.</summary>
    public const int SorTidFieldNumber = 3;
    private string sorTid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SorTid {
      get { return sorTid_; }
      set {
        sorTid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gesture" field.</summary>
    public const int GestureFieldNumber = 4;
    private global::Pb.Gesture gesture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Gesture Gesture {
      get { return gesture_; }
      set {
        gesture_ = value;
      }
    }

    /// <summary>Field number for the "simpgest" field.</summary>
    public const int SimpgestFieldNumber = 5;
    private global::Pb.Simpgest simpgest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Simpgest Simpgest {
      get { return simpgest_; }
      set {
        simpgest_ = value;
      }
    }

    /// <summary>Field number for the "filedata" field.</summary>
    public const int FiledataFieldNumber = 6;
    private pb::ByteString filedata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Filedata {
      get { return filedata_; }
      set {
        filedata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mesg" field.</summary>
    public const int MesgFieldNumber = 7;
    private string mesg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mesg {
      get { return mesg_; }
      set {
        mesg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id1 != other.Id1) return false;
      if (Id2 != other.Id2) return false;
      if (SorTid != other.SorTid) return false;
      if (!object.Equals(Gesture, other.Gesture)) return false;
      if (!object.Equals(Simpgest, other.Simpgest)) return false;
      if (Filedata != other.Filedata) return false;
      if (Mesg != other.Mesg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id1 != 0) hash ^= Id1.GetHashCode();
      if (Id2 != 0) hash ^= Id2.GetHashCode();
      if (SorTid.Length != 0) hash ^= SorTid.GetHashCode();
      if (gesture_ != null) hash ^= Gesture.GetHashCode();
      if (simpgest_ != null) hash ^= Simpgest.GetHashCode();
      if (Filedata.Length != 0) hash ^= Filedata.GetHashCode();
      if (Mesg.Length != 0) hash ^= Mesg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id1 != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Id1);
      }
      if (Id2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id2);
      }
      if (SorTid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SorTid);
      }
      if (gesture_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gesture);
      }
      if (simpgest_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Simpgest);
      }
      if (Filedata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Filedata);
      }
      if (Mesg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Mesg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id1);
      }
      if (Id2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id2);
      }
      if (SorTid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SorTid);
      }
      if (gesture_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gesture);
      }
      if (simpgest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Simpgest);
      }
      if (Filedata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Filedata);
      }
      if (Mesg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mesg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.Id1 != 0) {
        Id1 = other.Id1;
      }
      if (other.Id2 != 0) {
        Id2 = other.Id2;
      }
      if (other.SorTid.Length != 0) {
        SorTid = other.SorTid;
      }
      if (other.gesture_ != null) {
        if (gesture_ == null) {
          Gesture = new global::Pb.Gesture();
        }
        Gesture.MergeFrom(other.Gesture);
      }
      if (other.simpgest_ != null) {
        if (simpgest_ == null) {
          Simpgest = new global::Pb.Simpgest();
        }
        Simpgest.MergeFrom(other.Simpgest);
      }
      if (other.Filedata.Length != 0) {
        Filedata = other.Filedata;
      }
      if (other.Mesg.Length != 0) {
        Mesg = other.Mesg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id1 = (global::Pb.Id1) input.ReadEnum();
            break;
          }
          case 16: {
            Id2 = input.ReadUInt32();
            break;
          }
          case 26: {
            SorTid = input.ReadString();
            break;
          }
          case 34: {
            if (gesture_ == null) {
              Gesture = new global::Pb.Gesture();
            }
            input.ReadMessage(Gesture);
            break;
          }
          case 42: {
            if (simpgest_ == null) {
              Simpgest = new global::Pb.Simpgest();
            }
            input.ReadMessage(Simpgest);
            break;
          }
          case 50: {
            Filedata = input.ReadBytes();
            break;
          }
          case 58: {
            Mesg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
